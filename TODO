UNDERWAY
- mutations are done, which means i can start stringing the workflow together
- BUT FIRST some cleanup and refactoring
- AND MAYBE SECOND some elixirization of the code
- also do more around validation of mutation step - maybe w/ rand seed?





- an individual should have a validity check which is called optionally after mutations or after children are created
-- for debugging/observation, not running


PERF NOTES
- remember that prepending and popping first are fast w/ elixir lists b/c cons


? double-rep of genes - crossover-compatible rep, but also list of city indices

* need to be able to seed random in *one* place for result repro
* parallelism
* gpu?
* be able to save state and continue a run
* add license
* add second experiment, perhaps factoring or something weird?
* move abstract stuff (experiment, population modules) to Gelid. namespace
* will things go faster if i have a cached dual representation of the genes so i don't have to use pop_at every time?


REFACTOR
- make hyperparams the struct part of experiment subclass
-- easy to wrap in a script that fills in struct from persistent config
