UNDERWAY
- also do more around validation of mutation step - maybe w/ rand seed?
- take the generation check out of done?() and keep in framework as safeguard
- figure out how to make done?() work on more complex conditions including possibly moving averages
* pad gen num digits to 6 in output filenames
* put output files in timestamp subfolders
- see if i can add a gradient to the path plot in mathematica - tough to follow now
- in mathematica viz interface, add dropdown or similar for existing data folders
-- see Fast Introduction for Programmers video about InteractiveInterfaces on wolfram.com/wolfram-u




- an individual should have a validity check which is called optionally after mutations or after children are created
-- for debugging/observation, not running


PERF NOTES
- remember that prepending and popping first are fast w/ elixir lists b/c cons


? double-rep of genes - crossover-compatible rep, but also list of city indices

* need to be able to seed random in *one* place for result repro
* parallelism
* gpu?
* be able to save state and continue a run
* add second experiment, perhaps factoring or something weird?
* move abstract stuff (experiment, population modules) to Gelid. namespace
* will things go faster if i have a cached dual representation of the genes so i don't have to use pop_at every time?

? would it be too cute to have population pass calls to population.members when someone tries to address it as Enumerable?

REFACTOR
- make hyperparams the struct part of experiment subclass
-- easy to wrap in a script that fills in struct from persistent config
? should i pull reporting out of the framework and into a reporter specifiied/yielded by the experiment?